---
layout: post
title: "Tries [Draft in Progress]"
date: 2019-07-05 19:33:00
author: Shehab
categories: Computer-Science
tags: Algorithms
cover: "/assets/posts/tries.png"
---

Re<strong>trie</strong>val data structure. That's what a Trie is known for, and that's the easiest way to remember. A Trie is a special kind of a tree that handles string operations more conveniently. The entire English dictionary can be stored in a trie instead of a hash table.
A trie is a tree-like data structure where the nodes of the tree stores the entire alphabet, and strings or words can be retrieved by traversing down a branch path of the tree.
The shape and structure of a trie is always a set of linked nodes, connecting back to an empty root node. An important thing to note is that the number of child nodes in a trie depends completely upon the total number of values possible. For example, in the English alphabet, there are 26 letters, therefore, the total number of child nodes will be 26.

So what is the structure of a TrieNode? Well, looking at the cross-section of one of these nodes, there are only two things
1- A value, a char you might say, which might be null.
2- An array of references of its child nodes, all of which are null in the beginning.

{% highlight c++ %}
class TrieNode {
public:
TrieNode \*children[ALPHA_SIZE]; // size of the alphabet is 256.
bool isEndOfWord; // true if the node represents end of a word.
TrieNode() : isEndOfWord(false) {
for(int i = 0; i < ALPHA_SIZE; i++)
children[i] = NULL;
};
};
{% endhighlight %}

The figure below is an example of a trie filled with several english words, you notice that the black coloring refers to the <strong>isEndOfWord</strong> flag to indicate the end of the word. Looking at the farmost left branch, there are two words inserted in Trie which are "CAR" and "CARD".

<p align="center"><img src="/assets/posts/tries2.png"></p>

<p align="center"><a href="https://github.com/ShehabMMohamed/Datastructures-And-Algorithms/tree/master/Advanced%20Data%20Structures/Tries" target="_blank"> Tries in C++ </a></p>

<p align="center"><a href="https://github.com/ShehabMMohamed/Go-Datastructures/blob/main/internal/Tries/Trie.go" target="_blank"> Tries in Go </a></p>
